#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üè° PropertyFinder Phase 1 Demo');
console.log('=' .repeat(50));

// Check if mock data exists
const mockDataPath = path.join(process.cwd(), 'data', 'mock-permits.json');
if (fs.existsSync(mockDataPath)) {
  const mockData = JSON.parse(fs.readFileSync(mockDataPath, 'utf8'));
  
  console.log('\nüìä PERMITS DATA OVERVIEW:');
  console.log(`üìÖ Last Updated: ${new Date(mockData.lastUpdated).toLocaleString()}`);
  console.log(`üèóÔ∏è  Total Permits: ${mockData.summary.totalPermits}`);
  console.log(`üí∞ Total Value: $${mockData.summary.totalValue.toLocaleString()}`);
  console.log(`üìä Average Value: $${mockData.summary.averageValue.toLocaleString()}`);
  console.log(`üìç ZIP Codes Covered: ${mockData.summary.zipCodesCovered}`);
  console.log(`üó∫Ô∏è  States: ${mockData.summary.states.join(', ')}`);
  
  console.log('\nüèÜ TOP ZIP CODES BY ACTIVITY:');
  const topZips = mockData.zipCodeGroups
    .sort((a, b) => b.averageScore - a.averageScore)
    .slice(0, 3);
  
  topZips.forEach((zip, index) => {
    console.log(`${index + 1}. ${zip.zipCode} (${zip.location}, ${zip.state})`);
    console.log(`   Score: ${zip.averageScore.toFixed(1)} | Permits: ${zip.totalPermits} | Value: $${zip.totalValue.toLocaleString()}`);
  });
  
  console.log('\nüìà PERMIT TYPE BREAKDOWN:');
  const permitTypes = {};
  mockData.permits.forEach(permit => {
    if (!permitTypes[permit.type]) permitTypes[permit.type] = 0;
    permitTypes[permit.type]++;
  });
  
  Object.entries(permitTypes)
    .sort(([,a], [,b]) => b - a)
    .forEach(([type, count]) => {
      console.log(`   ${type}: ${count}`);
    });
  
  console.log('\nüéØ INVESTMENT OPPORTUNITIES IDENTIFIED:');
  console.log('‚Ä¢ Jersey City (07302): High-value new construction - potential for rental income');
  console.log('‚Ä¢ South Philly (19147): Modern townhouse development - gentrification opportunity');
  console.log('‚Ä¢ Newark (07102): Historic renovation - adaptive reuse potential');
  
} else {
  console.log('‚ùå Mock data not found. Run the permits ingest feature first:');
  console.log('   npm run feature -- permits-ingest');
}

console.log('\nüöÄ NEXT STEPS:');
console.log('1. Run the development server: npm run dev');
console.log('2. Open http://localhost:3000 in your browser');
console.log('3. Explore the three main views: Deals Table, Map View, Underwrite Form');
console.log('4. Test the investment calculator with different scenarios');
console.log('5. Run additional features as they become available');

console.log('\nüìã FEATURE ROADMAP:');
console.log('‚úÖ Phase 1 Core Dashboard - COMPLETE');
console.log('‚è≥ Permits Ingest - READY (needs API keys)');
console.log('‚è≥ Zillow Indices - NEXT');
console.log('‚è≥ Flood Risk Assessment - PLANNED');
console.log('‚è≥ News Pulse - PLANNED');
console.log('‚è≥ Investment Scoring - PLANNED');

console.log('\nüéâ Demo completed! Your PropertyFinder dashboard is ready to use.');
